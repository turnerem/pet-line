TODO, ordered by nextness
- put line on rect. Make rect move and add filter to it. Flip slop of line
  when direction changes
- add buttons to increase/decreasae hunger, energy, etc. For testing.
- think of mood updater given owner action. This could be a switch on owner
  action. This is probably preferable: having all owner-influenced mood
  updating in just one function
  - ditto for mood updating given want X

how to manage the coordinates of the line? Coordinates are needed to
initialise line loc. Then x is updated based on movement. Need a custom hook
for managing movement (x)?

Some variables are required everywhere: svgDims, pet characteristics, pet loc,
foodbowl loc, foodbowl dims

28oct20:
- DONE in watchTv: how do action to watch tv, wantsTv, and other telly stuff fit together? Need one function that is called periodically to check whether line wants tv, whether it's currently watching it, take action accordingly, and update mood
- pet must choose between things when it has multiple wants. So create a
  priority function
- DONE: separate out mood from state. State is watchingTv, walking, sleeping, etc


29oct20:
- DONE: refactor eat to be like watchTv - the only function called (exposed) to do with eating is eat(), tryEat, etc
- need a tryEat?
  - refactor Line.js - pet can only do one thing at a time. Maybe a function
    that returns pet.actionDecision. This will look at all pet's desires and
    decide what it's going to do next. This decision function could also
    control periodicity - all actions are based on decisions, and each new
    decision happens every x mins, where x is shorter if the decision is
    whether or not to have another bite, but longer if it's watching telly
  - if pet balanced its wants in actionDecision, may need to remove the want
    checks from the action functions, e.g. watchTv currently calls wantsTv
  - Apart from pet decisions, the owner can intervene, and this function
    should also evaluate pet wants
  - All wants should be between 0 and 1
  - Basic idea is that (aside from owner intervention), pet line is always
    acting based on what it WANTS.
      - wants for individual activities are updated
      - competing wants are balanced and ultimateWant is derived
      - action taken based on ultimateWant, if not already doing ultimateWant
      - if not able to take that action (e.g. TV not available, but
	ultimateWant === 'tv'), loop effort to watch tv and update mood
	accordingly
- add functionality for tickle to pet obj
- check all action functions are only being called periodically.
- capture data on moodNum increments, logging, etc and figure out a way to
  visualise. Based on general shape, decide where cutoff points sould be for
  different moods, etc.
- when calculating angle, just calculate once when state changes

NEXT: refactor each want calc to return number between 0 and 1. Then write
actionDecision to look at these wants and make decision.
